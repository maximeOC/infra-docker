#les modules

# Définit l'utilisateur et le groupe avec lequel le daemon Nginx sera lancé. Si le groupe est omis, un groupe dont le nom correspond à celui de l'utilisateur sera utilisé.
user www-data; ##**Syntaxe:** **user** **user** **[group]**;
# La valeur optimale dépend de nombreux facteurs.. y compris (mais non limité à) au nombre de CPU que vous disposez; le nombre de disques durs..
worker_processes 4; ##**Syntaxe:** worker_processes **nombre**  **auto**;
# Le fichier stockera le PID de votre processus.
pid /run/nginx.pid;##**Syntaxe:** pid **fichier.pid**;

# Définir le nombre maximal de connexions simultanées ouvertes par le processus.
events { worker_connections 768; ##**Syntaxe:** worker_connections **nombre**;

# Si multi_accept est désactivé, le processus acceptera une nouvelle connexion à la fois, dans le cas contraire, le processus acceptera toutes les nouvelles connexions en même temps.
multi_accept on;} ##**Syntaxe:** multi_accept **on**  **off**;

# Nous allons dire que nous avons un index index.php; dans notre virtual host, Sendfile permettra de se délester de PHP pour l’envoi des fichiers aux navigateurs. Il est fortement recommandé d’utiliser ce module pour alléger les process sur le serveur.
http { sendfile on; ##**Syntaxe;** sendfile **on** **off**;

# Le module tcp_nopush fait le contraire de tcp_nodelay : au lieu d’optimiser les délais d’envoi des informations, il optimise la quantité d’informations envoyée. tcp_nopush et sendfile sont indissociable
tcp_nopush on; ##**Syntaxe:** tcp_nopush **on**  **off**

# Activer ou désactiver l'algorithme de Nagle2).
tcp_nodelay on; ##**Syntaxe:** tcp_nodelay **on**  **off**;

# Le premier paramètre est obligatoire définit un délai pendant lequel une connexion cliente KeepAlive restera ouverte côté serveur. La valeur 0 désactive les connexions clientes KeepAlive. Le deuxième paramètre quand à lui est facultatif définit la valeur de délai de l'entête // header.
keepalive_timeout 65; ##**Syntaxe:** keepalive_timeout **timeout** **[header_timeout]**;


# Définit la taille maximale des types de tables de hachage. Les détails de la mise en place des tables de hachage sont fournis dans un document distinct. Pour traiter rapidement des ensembles de données statiques tels que le nom de votre serveur, les directions map, les Types MIME, etc … Nginx utilise les tables de hachage.
types_hash_max_size 2048; ##**Syntaxe:** types_hash_max_size **taille**;